/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package se.hyperlab.imagecropper;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiBlob;

import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;


import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.provider.MediaStore;

import java.io.File;
import java.io.FileNotFoundException;

import android.widget.Toast;

import com.soundcloud.android.crop.Crop;
import com.soundcloud.android.crop.CropImageActivity;

@Kroll.module(name="TiImageCropper", id="se.hyperlab.imagecropper")
public class TiImageCropperModule extends KrollModule implements TiActivityResultHandler
{

	// Standard Debugging variables
	private static final String LCAT = "TiImageCropperModule";
	private static final boolean DBG = TiConfig.LOGD;

	private KrollFunction successCallback;
	private KrollFunction cancelCallback;
	private KrollFunction errorCallback;

	public TiImageCropperModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	@Override
	public void onResult(Activity activity, int requestCode, int resultCode, Intent result) {
        Log.i(LCAT, "onResult Called");
		if (requestCode == Crop.REQUEST_CROP) {
			if (resultCode == Activity.RESULT_OK) {
                Bitmap bitmap = null;
                try {
                    bitmap = MediaStore.Images.Media.getBitmap(activity.getContentResolver(), Crop.getOutput(result));
                } catch (Exception e) {}

				KrollDict event = new KrollDict();
				event.put("image", TiBlob.blobFromImage(bitmap));
                event.put(TiC.EVENT_PROPERTY_SOURCE, this);
				successCallback.callAsync(getKrollObject(), event);

			} else if (resultCode == Crop.RESULT_ERROR) {
				Toast.makeText(activity, Crop.getError(result).getMessage(), Toast.LENGTH_SHORT).show();

                if (errorCallback == null) return;
                KrollDict event = new KrollDict();
                event.put(TiC.EVENT_PROPERTY_ERROR, Crop.getError(result).getMessage());
                event.put(TiC.EVENT_PROPERTY_SOURCE, this);
                errorCallback.callAsync(getKrollObject(), event);
			}
		}
	}

    @Override
    public void onError(Activity activity, int requestCode, Exception e)
    {
        Log.i(LCAT, "onError Called");
        if (errorCallback == null) return;
        KrollDict event = new KrollDict();
        event.put(TiC.EVENT_PROPERTY_ERROR, e.getMessage());
        event.put(TiC.EVENT_PROPERTY_SOURCE, this);
        errorCallback.callAsync(getKrollObject(), event);
    }

	// Methods
	@Kroll.method
	public void open(KrollDict options) {
        Activity activity = TiApplication.getInstance().getCurrentActivity();
        TiActivitySupport support = (TiActivitySupport) activity;

		successCallback = getCallback(options, "success");
		cancelCallback = getCallback(options, "cancel");
		errorCallback = getCallback(options, "error");

		TiBlob originalImage = getImageData(options, "image");

		Uri source = Uri.parse(originalImage.getNativePath());
		Uri destination = Uri.fromFile(new File(activity.getCacheDir(), "cropped"));

        Intent cropIntent = new Intent();

        cropIntent.setData(source);
        cropIntent.putExtra(MediaStore.EXTRA_OUTPUT, destination);

		cropIntent.putExtra("aspect_x", options.getInt("aspect_x"));
        cropIntent.putExtra("aspect_y", options.getInt("aspect_y"));

        if (options.containsKeyAndNotNull("max_y")) {
			cropIntent.putExtra("max_y", options.getInt("max_y"));
		}
		if (options.containsKeyAndNotNull("max_x")) {
            cropIntent.putExtra("max_x", options.getInt("max_x"));
        }

		// override with size for square images and backwards compatibility
		if (options.containsKeyAndNotNull("size")) {
			cropIntent.putExtra("max_x", options.getInt("size"));
			cropIntent.putExtra("max_y", options.getInt("size"));

			cropIntent.putExtra("aspect_x", 1);
	        cropIntent.putExtra("aspect_y", 1);
		}
        cropIntent.setClass(activity, CropImageActivity.class);

        support.launchActivityForResult(cropIntent, Crop.REQUEST_CROP, this);
	}

	private KrollFunction getCallback(final KrollDict options, final String name){
		if (options.containsKey(name)) {
			return (KrollFunction) options.get(name);
		} else {
			Log.e(LCAT, "Callback not found:" + name);
			return null;
		}
	}

	private TiBlob getImageData(final KrollDict options, final String name){
		if (options.containsKey(name)) {
			return (TiBlob) options.get(name);
		} else {
			Log.e(LCAT, "Image not found: " + name);
			return null;
		}
	}}
